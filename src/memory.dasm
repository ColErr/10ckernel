;***************************
;Memory management functions
;***************************

#define MEM_ERR_INSFRAM     128
#define MEM_ERR_NOBLOCK     129

init_memory:
    SET A, free_memory_start
    DIV A, 0x200
    IFN EX, 0
        ADD A, 1
    
    SET PC, POP
    
;Takes pages required (A), returns starting page number (A)
;Do a SHL, 9 to get starting address
;Values over 127 are errors.
;128 = RAM full
;129 = Not enough RAM
;130 = No contiguous space for request
;131 = Request too large
malloc:
    IFG A, 128
        SET PC, .err131:
    SET B, 0
    SET C, 1
    SET Z, 12
    SET I, memory_pool
    
    IFG A, C
        ADD PC, 3
            SET A, B
            SET PC, .find
    ADD B, 1
    SHL C, 1
    SUB PC, 7
    
    .find:
    SET X, [I]
    SHR X, Z
    AND X, 0xF
    IFG X, 7
        SET PC, .next
    IFG A, X
        SET PC, .next
    IFL A, X
        SET PC, .split
    SET PC, .found
    
    .next:
    AND X, 0x7
    IFG X, 1
        SET PC, .nextword
    ADD X, 1
    MUL X, 4
    SUB Z, X
    IFG Z, -1
        SET PC, .find
    SET X, 2
    SET Z, 12
    .nextword:
    SET C, 1
    SUB X, 2
    SHL C, X
    ADD I, C
    IFL I, memory_pool
        SET PC, .find
    SET PC, .err128
    
    .split:
    SET C, 1
    SHL C, Z
    SUB [I], C
    SUB X, 1
    SET B, X
    IFG X, 1
        SET PC, .newword
    ADD B, 1
    MUL B, 4
    SUB Z, B
    IFG Z, -1
        SET PC, .adjust
    SET B, 2
    SET Z, 12
    .newword:
    SET C, 1
    SUB B, 2
    SHL C, B
    ADD C, I
    .adjust:
    SHL X, Z
    BOR [C], X
    SET PC, .find
    
    .found:
    AND A, 0x8
    SHL A, Z
    BOR [I], A
    SET A, 12
    SUB A, Z
    SUB I, memory_pool
    MUL I, 0x800
    MUL A, 0x200
    ADD A, I
    
    SET PC, POP
    
    .err128:
    SET A, 128
    SET PC, POP
    .err131:
    SET A, 131
    SET PC, POP

;Takes address (A)
free:
    

;Starting address (A), Words (B)
clear_mem:
    SET PUSH, I
    SET PUSH, J
    
    SET I, A
    SET A, B
    DIV A, 0x10
    
    IFE A, 0
        ADD PC, 18
    STI [I], 0
    STI [I], 0
    STI [I], 0
    STI [I], 0 ;4
    STI [I], 0
    STI [I], 0
    STI [I], 0
    STI [I], 0 ;8
    STI [I], 0
    STI [I], 0
    STI [I], 0
    STI [I], 0 ;12
    STI [I], 0
    STI [I], 0
    STI [I], 0
    STI [I], 0 ;16
    SUB A, 1
    SUB PC, 20
    
    MOD B, 0x10
    IFE B, 0
        ADD PC, 3
    STI [I], 0
    SUB B, 1
    SUB PC, 5
    
    SET J, POP
    SET I, POP
    SET PC, POP

;From address (A), To address (B), Words (C)
copy_mem:
    SET PUSH, I
    SET PUSH, J
    
    SET I, A
    SET J, B
    SET A, C
    DIV A, 0x10
    
    IFE A, 0
        ADD PC, 18
    STI [I], J
    STI [I], J
    STI [I], J
    STI [I], J ;4
    STI [I], J
    STI [I], J
    STI [I], J
    STI [I], J ;8
    STI [I], J
    STI [I], J
    STI [I], J
    STI [I], J ;12
    STI [I], J
    STI [I], J
    STI [I], J
    STI [I], J ;16
    SUB A, 1
    SUB PC, 20
    
    MOD C, 0x10
    IFE C, 0
        ADD PC, 3
    STI [I], 0
    SUB C, 1
    SUB PC, 5
    
    SET J, POP
    SET I, POP
    SET PC, POP

memory_pool:
DAT 0x7000
#reserve 31
memory_pool_end: